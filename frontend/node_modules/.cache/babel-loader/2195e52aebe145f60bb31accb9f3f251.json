{"ast":null,"code":"import { createComment, getPostComments, getComment, deleteComment, getAllComments } from '../util/comment_api_util';\nexport const RECEIVE_COMMENT = \"RECEIVE_COMMENT\";\nexport const RECEIVE_NEW_COMMENT = \"RECEIVE_NEW_COMMENT\";\nexport const RECEIVE_POST_COMMENTS = \"RECEIVE_POST_COMMENTS\";\nexport const DELETE_COMMENT = \"DELETE_COMMENT\";\nexport const RECEIVE_COMMENTS = \"RECEIVE_COMMENTS\";\nexport const receiveAllComments = comments => ({\n  type: RECEIVE_COMMENTS,\n  comments\n});\n\nconst receiveComment = comment => ({\n  type: RECEIVE_COMMENT,\n  comment\n});\n\nconst receiveNewComment = comment => ({\n  type: RECEIVE_NEW_COMMENT,\n  comment\n});\n\nconst receivePostComments = comments => ({\n  type: RECEIVE_POST_COMMENTS,\n  comments\n});\n\nconst destroyComment = commentId => ({\n  type: DELETE_COMMENT,\n  commentId\n});\n\nexport const fetchComment = commentId => dispatch => {\n  return getComment(commentId).then(comment => dispatch(receiveComment(comment))).catch(err => console.log(err));\n};\nexport const fetchAllComments = () => dispatch => {\n  return getAllComments().then(comments => dispatch(receiveAllComments(comments))).catch(err => console.log(err));\n};\nexport const composeComment = data => dispatch => {\n  return createComment(data).then(comment => dispatch(receiveNewComment(comment))).catch(err => console.log(err));\n};\nexport const fetchPostComments = postId => dispatch => {\n  // debugger;\n  return getPostComments(postId).then(comments => dispatch(receivePostComments(comments))).catch(err => console.log(err));\n};\nexport const removeComment = commentId => dispatch => {\n  // debugger; \n  return deleteComment(commentId).then(_ => dispatch(destroyComment(commentId))) //convention to use _ or () to indicate that we don't really need to use what's inside\n  // .then(payload => dispatch(destroyComment(commentId)))\n  .catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/actions/comment_actions.js"],"names":["createComment","getPostComments","getComment","deleteComment","getAllComments","RECEIVE_COMMENT","RECEIVE_NEW_COMMENT","RECEIVE_POST_COMMENTS","DELETE_COMMENT","RECEIVE_COMMENTS","receiveAllComments","comments","type","receiveComment","comment","receiveNewComment","receivePostComments","destroyComment","commentId","fetchComment","dispatch","then","catch","err","console","log","fetchAllComments","composeComment","data","fetchPostComments","postId","removeComment","_"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,eAAxB,EAAyCC,UAAzC,EAAqDC,aAArD,EAAoEC,cAApE,QAA0F,0BAA1F;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACvCC,EAAAA,IAAI,EAAEH,gBADiC;AAEvCE,EAAAA;AAFuC,CAAL,CAAnC;;AAKP,MAAME,cAAc,GAAGC,OAAO,KAAK;AAC3BF,EAAAA,IAAI,EAAEP,eADqB;AAE3BS,EAAAA;AAF2B,CAAL,CAA9B;;AAKA,MAAMC,iBAAiB,GAAGD,OAAO,KAAK;AAClCF,EAAAA,IAAI,EAAEN,mBAD4B;AAElCQ,EAAAA;AAFkC,CAAL,CAAjC;;AAMA,MAAME,mBAAmB,GAAGL,QAAQ,KAAK;AACrCC,EAAAA,IAAI,EAAEL,qBAD+B;AAErCI,EAAAA;AAFqC,CAAL,CAApC;;AAKA,MAAMM,cAAc,GAAGC,SAAS,KAAK;AACjCN,EAAAA,IAAI,EAAEJ,cAD2B;AAEjCU,EAAAA;AAFiC,CAAL,CAAhC;;AAOA,OAAO,MAAMC,YAAY,GAAGD,SAAS,IAAIE,QAAQ,IAAI;AACjD,SACIlB,UAAU,CAACgB,SAAD,CAAV,CACKG,IADL,CACUP,OAAO,IAAIM,QAAQ,CAACP,cAAc,CAACC,OAAD,CAAf,CAD7B,EAEKQ,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADJ;AAKH,CANM;AAQP,OAAO,MAAMG,gBAAgB,GAAG,MAAMN,QAAQ,IAAI;AAC9C,SACIhB,cAAc,GACTiB,IADL,CACUV,QAAQ,IAAIS,QAAQ,CAACV,kBAAkB,CAACC,QAAD,CAAnB,CAD9B,EAEKW,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADJ;AAKH,CANM;AAQP,OAAO,MAAMI,cAAc,GAAGC,IAAI,IAAIR,QAAQ,IAAI;AAC9C,SACIpB,aAAa,CAAC4B,IAAD,CAAb,CACKP,IADL,CACUP,OAAO,IAAIM,QAAQ,CAACL,iBAAiB,CAACD,OAAD,CAAlB,CAD7B,EAEKQ,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADJ;AAKH,CANM;AAQP,OAAO,MAAMM,iBAAiB,GAAIC,MAAD,IAAYV,QAAQ,IAAI;AACrD;AACA,SACInB,eAAe,CAAC6B,MAAD,CAAf,CACKT,IADL,CACUV,QAAQ,IAAIS,QAAQ,CAACJ,mBAAmB,CAACL,QAAD,CAApB,CAD9B,EAEKW,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADJ;AAKH,CAPM;AAWP,OAAO,MAAMQ,aAAa,GAAIb,SAAD,IAAeE,QAAQ,IAAI;AACpD;AACA,SACIjB,aAAa,CAACe,SAAD,CAAb,CACKG,IADL,CACWW,CAAC,IAAIZ,QAAQ,CAACH,cAAc,CAACC,SAAD,CAAf,CADxB,EACqD;AACjD;AAFJ,GAGKI,KAHL,CAGWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHlB,CADJ;AAMH,CARM","sourcesContent":["import { createComment, getPostComments, getComment, deleteComment, getAllComments } from '../util/comment_api_util';\n\nexport const RECEIVE_COMMENT = \"RECEIVE_COMMENT\";\nexport const RECEIVE_NEW_COMMENT = \"RECEIVE_NEW_COMMENT\";\nexport const RECEIVE_POST_COMMENTS = \"RECEIVE_POST_COMMENTS\";\nexport const DELETE_COMMENT = \"DELETE_COMMENT\";\nexport const RECEIVE_COMMENTS = \"RECEIVE_COMMENTS\";\n\nexport const receiveAllComments = comments => ({\n        type: RECEIVE_COMMENTS,\n        comments\n    });\n    \nconst receiveComment = comment => ({\n        type: RECEIVE_COMMENT,\n        comment,\n});\n\nconst receiveNewComment = comment => ({\n    type: RECEIVE_NEW_COMMENT,\n    comment,\n});\n\n\nconst receivePostComments = comments => ({\n    type: RECEIVE_POST_COMMENTS,\n    comments\n});\n\nconst destroyComment = commentId => ({\n    type: DELETE_COMMENT,\n    commentId,\n});\n\n\n\nexport const fetchComment = commentId => dispatch => {\n    return (\n        getComment(commentId)\n            .then(comment => dispatch(receiveComment(comment)))\n            .catch(err => console.log(err))\n    )\n};\n\nexport const fetchAllComments = () => dispatch => {\n    return (\n        getAllComments()\n            .then(comments => dispatch(receiveAllComments(comments)))\n            .catch(err => console.log(err))\n    )\n};\n\nexport const composeComment = data => dispatch => {\n    return (\n        createComment(data)\n            .then(comment => dispatch(receiveNewComment(comment)))\n            .catch(err => console.log(err))\n    )\n};\n\nexport const fetchPostComments = (postId) => dispatch => {\n    // debugger;\n    return (\n        getPostComments(postId)\n            .then(comments => dispatch(receivePostComments(comments)))\n            .catch(err => console.log(err))\n    )\n};\n\n\n\nexport const removeComment = (commentId) => dispatch => {\n    // debugger; \n    return (\n        deleteComment(commentId)\n            .then( _ => dispatch(destroyComment(commentId))) //convention to use _ or () to indicate that we don't really need to use what's inside\n            // .then(payload => dispatch(destroyComment(commentId)))\n            .catch(err => console.log(err))\n    )\n};"]},"metadata":{},"sourceType":"module"}