{"ast":null,"code":"var _jsxFileName = \"/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\";\nimport { fetchRoomMessages, newLocalMessage } from \"../../actions/message_action\";\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport InfoBar from './bar';\nimport Input from './input';\nimport Messages from './messages';\nimport TextContainer from './text';\nimport \"./Chat.css\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  debugger;\n\n  if (location) {\n    const user = useSelector(state => state.session.user);\n    const messagesOld = useSelector(state => state.messages);\n    const [name, setName] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [users, setUsers] = useState([]);\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const dispatch = useDispatch();\n    const ENDPOINT = \"localhost:3000\";\n    useEffect(() => {\n      debugger;\n      const {\n        name,\n        room\n      } = queryString.parse(location.search);\n      socket = io(ENDPOINT);\n      setRoom(room);\n      setName(name);\n      dispatch(addRoomToRedux(room));\n      dispatch(fetchRoomMessages(room));\n      socket.emit(\"join\", {\n        name,\n        room\n      }, error => {\n        if (error) {\n          alert(error);\n        }\n      });\n    }, [ENDPOINT, location.search]);\n    useEffect(() => {\n      socket.on(\"message\", message => {\n        setMessages(messages => [...messages, message]);\n      });\n      socket.on(\"roomData\", ({\n        users\n      }) => {\n        const unique = [...new Set(users.map(item => item.name))];\n        setUsers([...unique]);\n      });\n    }, []);\n    const messagesOldMapped = messagesOld.map(o => ({\n      user: o.user,\n      text: o.message\n    }));\n\n    const sendMessage = event => {\n      event.preventDefault();\n\n      if (message) {\n        socket.emit(\"sendMessage\", {\n          message,\n          room,\n          user\n        }, () => setMessage(\"\"));\n        dispatch(newLocalMessage(message));\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outerContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InfoBar, {\n      room: room,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Messages, {\n      messages: [...messagesOldMapped, ...messages],\n      name: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      message: message,\n      setMessage: setMessage,\n      sendMessage: sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(TextContainer, {\n      users: users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"empty-chats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, \"EMPTY\");\n  }\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js"],"names":["React","useState","useEffect","useDispatch","useSelector","addRoomToRedux","fetchRoomMessages","newLocalMessage","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","user","state","session","messagesOld","messages","name","setName","room","setRoom","users","setUsers","message","setMessage","setMessages","dispatch","ENDPOINT","parse","search","emit","error","alert","on","unique","Set","map","item","messagesOldMapped","o","text","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect} from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\"\nimport { fetchRoomMessages, newLocalMessage } from \"../../actions/message_action\";\n\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport InfoBar from './bar';\nimport Input from './input';\nimport Messages from './messages';\nimport TextContainer from './text';\n\n\nimport \"./Chat.css\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n\ndebugger\n\n  if (location) {\n    const user = useSelector((state) => state.session.user);\n    const messagesOld = useSelector((state) => state.messages);\n    const [name, setName] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [users, setUsers] = useState([]);\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const dispatch = useDispatch();\n  \n    const ENDPOINT = \"localhost:3000\";\n    \n    useEffect(() => {\n  debugger\n      const { name, room } = queryString.parse(location.search);\n\n      socket = io(ENDPOINT);\n\n      setRoom(room);\n      setName(name);\n\n      dispatch(addRoomToRedux(room));\n      dispatch(fetchRoomMessages(room));\n\n      socket.emit(\"join\", { name, room }, (error) => {\n        if (error) {\n          alert(error);\n        }\n      });\n    }, [ENDPOINT, location.search]);\n\n\n    useEffect(() => {\n      socket.on(\"message\", (message) => {\n        setMessages((messages) => [...messages, message]);\n      });\n\n      socket.on(\"roomData\", ({ users }) => {\n        const unique = [...new Set(users.map((item) => item.name))];\n        setUsers([...unique])\n      });\n    }, []);\n\n\n    \n  const messagesOldMapped = messagesOld.map(o => ({ user: o.user, text: o.message }));\n\n\n    const sendMessage = (event) => {\n      event.preventDefault();\n\n      if (message) {\n        socket.emit(\"sendMessage\", {message, room, user }, () => setMessage(\"\"));\n        dispatch(newLocalMessage(message));\n      }\n    };\n\n    return (\n      <div className=\"outerContainer\">\n        <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={[...messagesOldMapped, ...messages]} name={name} />\n          <Input\n            message={message}\n            setMessage={setMessage}\n            sendMessage={sendMessage}\n          />\n        </div>\n\n        <TextContainer users={users} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"empty-chats\">\n        EMPTY\n      </div>\n    )\n  }\n};\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}