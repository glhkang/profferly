{"ast":null,"code":"import * as APIUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\nexport const RECEIVE_USER_ROOMS_ADD = \"RECEIVE_USER_ROOMS_ADD\";\nexport const addRoomToRedux = room => {\n  return {\n    type: RECEIVE_USER_ROOMS_ADD,\n    room\n  };\n};\nexport const receiveCurrentUser = currentUser => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n};\nexport const receiveUserSignIn = () => {\n  return {\n    type: RECEIVE_USER_SIGN_IN\n  };\n};\nexport const receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n});\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\nexport const signup = user => dispatch => {\n  return APIUtil.signup(user).then(res => {\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token);\n    APIUtil.setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n  }).catch(err => {\n    dispatch(receiveErrors(err.response.data));\n  });\n};\nexport const login = user => dispatch => {\n  return APIUtil.login(user).then(res => {\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token);\n    APIUtil.setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n  }).catch(err => {\n    dispatch(receiveErrors(err.response.data));\n  });\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_USER_SIGN_IN","RECEIVE_USER_ROOMS_ADD","addRoomToRedux","room","type","receiveCurrentUser","currentUser","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","res","token","data","localStorage","setItem","setAuthToken","decoded","catch","err","response","login","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEH,sBADD;AAELE,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,kBAAkB,GAAIC,WAAD,IAAiB;AACjD,SAAO;AACLF,IAAAA,IAAI,EAAEP,oBADD;AAELS,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACrC,SAAO;AACLH,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMQ,aAAa,GAAIC,MAAD,KAAa;AACxCL,EAAAA,IAAI,EAAEN,sBADkC;AAExCW,EAAAA;AAFwC,CAAb,CAAtB;AAKP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BN,EAAAA,IAAI,EAAEL;AADyB,CAAP,CAAnB;AAIP,OAAO,MAAMY,MAAM,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAC5C,SAAOlB,OAAO,CAACgB,MAAR,CAAeC,IAAf,EACJE,IADI,CACEC,GAAD,IAAS;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACArB,IAAAA,OAAO,CAACyB,YAAR,CAAqBJ,KAArB;AACA,UAAMK,OAAO,GAAGzB,UAAU,CAACoB,KAAD,CAA1B;AACAH,IAAAA,QAAQ,CAACR,kBAAkB,CAACgB,OAAD,CAAnB,CAAR;AACD,GAPI,EAQJC,KARI,CAQGC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAACL,aAAa,CAACe,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAAd,CAAR;AACD,GAVI,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMQ,KAAK,GAAIb,IAAD,IAAWC,QAAD,IAAc;AAC3C,SAAOlB,OAAO,CAAC8B,KAAR,CAAcb,IAAd,EACJE,IADI,CACEC,GAAD,IAAS;AACb,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACArB,IAAAA,OAAO,CAACyB,YAAR,CAAqBJ,KAArB;AACA,UAAMK,OAAO,GAAGzB,UAAU,CAACoB,KAAD,CAA1B;AACAH,IAAAA,QAAQ,CAACR,kBAAkB,CAACgB,OAAD,CAAnB,CAAR;AACD,GAPI,EAQJC,KARI,CAQGC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAACL,aAAa,CAACe,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAAd,CAAR;AACD,GAVI,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMS,MAAM,GAAG,MAAOb,QAAD,IAAc;AACxCK,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB;AACAhC,EAAAA,OAAO,CAACyB,YAAR,CAAqB,KAArB;AACAP,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,CAJM","sourcesContent":["import * as APIUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\nexport const RECEIVE_USER_ROOMS_ADD = \"RECEIVE_USER_ROOMS_ADD\";\n\nexport const addRoomToRedux = (room) => {\n  return {\n    type: RECEIVE_USER_ROOMS_ADD,\n    room,\n  };\n};\n\nexport const receiveCurrentUser = (currentUser) => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser,\n  };\n};\n\nexport const receiveUserSignIn = () => {\n  return {\n    type: RECEIVE_USER_SIGN_IN,\n  };\n};\n\nexport const receiveErrors = (errors) => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors,\n});\n\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT,\n});\n\nexport const signup = (user) => (dispatch) => {\n  return APIUtil.signup(user)\n    .then((res) => {\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      APIUtil.setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(receiveCurrentUser(decoded));\n    })\n    .catch((err) => {\n      dispatch(receiveErrors(err.response.data));\n    });\n};\n\nexport const login = (user) => (dispatch) => {\n  return APIUtil.login(user)\n    .then((res) => {\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      APIUtil.setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(receiveCurrentUser(decoded));\n    })\n    .catch((err) => {\n      dispatch(receiveErrors(err.response.data));\n    });\n};\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"jwtToken\");\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};\n"]},"metadata":{},"sourceType":"module"}