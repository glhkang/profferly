{"ast":null,"code":"import{connect}from\"react-redux\";import{fetchUserPosts as _fetchUserPosts,fetchPosts as _fetchPosts,composePost as _composePost,removePost as _removePost}from\"../../actions/post_actions\";import{fetchUsers as _fetchUsers}from\"../../actions/user_actions\";import{fetchPhotos as _fetchPhotos}from\"../../actions/photo_actions\";import Profile from\"./profile\";import{fetchComment as _fetchComment,fetchPostComments as _fetchPostComments,composeComment as _composeComment,removeComment as _removeComment,fetchAllComments as _fetchAllComments}from\"../../actions/comment_actions\";var mapStateToProps=function mapStateToProps(state,ownProps){return{posts:Object.values(state.posts),currentUser:state.session.user,user:ownProps.match.params.id,users:state.users,newPost:state.posts.new,history:ownProps.history,comments:state.comments.all};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{fetchUserPosts:function fetchUserPosts(id){return dispatch(_fetchUserPosts(id));},fetchPosts:function fetchPosts(){return dispatch(_fetchPosts());},composePost:function composePost(data){return dispatch(_composePost(data));},fetchUsers:function fetchUsers(){return dispatch(_fetchUsers());},removePost:function removePost(id){return dispatch(_removePost(id));},fetchPhotos:function fetchPhotos(){return dispatch(_fetchPhotos());},fetchAllComments:function fetchAllComments(){return dispatch(_fetchAllComments());},composeComment:function composeComment(comment){return dispatch(_composeComment(comment));},removeComment:function removeComment(commentId){return dispatch(_removeComment(commentId));},fetchPostComments:function fetchPostComments(postId){return dispatch(_fetchPostComments(postId));},fetchComment:function fetchComment(commentId){return dispatch(_fetchComment(commentId));}};};export default connect(mapStateToProps,mapDispatchToProps)(Profile);","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/components/profile/profile_container.js"],"names":["connect","fetchUserPosts","fetchPosts","composePost","removePost","fetchUsers","fetchPhotos","Profile","fetchComment","fetchPostComments","composeComment","removeComment","fetchAllComments","mapStateToProps","state","ownProps","posts","Object","values","currentUser","session","user","match","params","id","users","newPost","new","history","comments","all","mapDispatchToProps","dispatch","data","comment","commentId","postId"],"mappings":"AAAA,OAASA,OAAT,KAAwB,aAAxB,CACA,OACEC,cAAc,GAAdA,CAAAA,eADF,CAEEC,UAAU,GAAVA,CAAAA,WAFF,CAGEC,WAAW,GAAXA,CAAAA,YAHF,CAIEC,UAAU,GAAVA,CAAAA,WAJF,KAKO,4BALP,CAMA,OAASC,UAAU,GAAVA,CAAAA,WAAT,KAA2B,4BAA3B,CACA,OAASC,WAAW,GAAXA,CAAAA,YAAT,KAA4B,6BAA5B,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OACEC,YAAY,GAAZA,CAAAA,aADF,CAEEC,iBAAiB,GAAjBA,CAAAA,kBAFF,CAGEC,cAAc,GAAdA,CAAAA,eAHF,CAIEC,aAAa,GAAbA,CAAAA,cAJF,CAKEC,gBAAgB,GAAhBA,CAAAA,iBALF,KAMO,+BANP,CAQA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAO,CACLC,KAAK,CAAEC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACE,KAApB,CADF,CAELG,WAAW,CAAEL,KAAK,CAACM,OAAN,CAAcC,IAFtB,CAGLA,IAAI,CAAEN,QAAQ,CAACO,KAAT,CAAeC,MAAf,CAAsBC,EAHvB,CAILC,KAAK,CAAEX,KAAK,CAACW,KAJR,CAKLC,OAAO,CAAEZ,KAAK,CAACE,KAAN,CAAYW,GALhB,CAMLC,OAAO,CAAEb,QAAQ,CAACa,OANb,CAOLC,QAAQ,CAAEf,KAAK,CAACe,QAAN,CAAeC,GAPpB,CAAP,CASD,CAVD,CAYA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAc,CACvC,MAAO,CACL/B,cAAc,CAAE,wBAACuB,EAAD,QAAQQ,CAAAA,QAAQ,CAAC/B,eAAc,CAACuB,EAAD,CAAf,CAAhB,EADX,CAELtB,UAAU,CAAE,4BAAM8B,CAAAA,QAAQ,CAAC9B,WAAU,EAAX,CAAd,EAFP,CAGLC,WAAW,CAAE,qBAAC8B,IAAD,QAAUD,CAAAA,QAAQ,CAAC7B,YAAW,CAAC8B,IAAD,CAAZ,CAAlB,EAHR,CAIL5B,UAAU,CAAE,4BAAM2B,CAAAA,QAAQ,CAAC3B,WAAU,EAAX,CAAd,EAJP,CAKLD,UAAU,CAAE,oBAACoB,EAAD,QAAQQ,CAAAA,QAAQ,CAAC5B,WAAU,CAACoB,EAAD,CAAX,CAAhB,EALP,CAMLlB,WAAW,CAAE,6BAAM0B,CAAAA,QAAQ,CAAC1B,YAAW,EAAZ,CAAd,EANR,CAOLM,gBAAgB,CAAE,kCAAMoB,CAAAA,QAAQ,CAACpB,iBAAgB,EAAjB,CAAd,EAPb,CAQLF,cAAc,CAAE,wBAACwB,OAAD,QAAaF,CAAAA,QAAQ,CAACtB,eAAc,CAACwB,OAAD,CAAf,CAArB,EARX,CASLvB,aAAa,CAAE,uBAACwB,SAAD,QAAeH,CAAAA,QAAQ,CAACrB,cAAa,CAACwB,SAAD,CAAd,CAAvB,EATV,CAUL1B,iBAAiB,CAAE,2BAAC2B,MAAD,QAAYJ,CAAAA,QAAQ,CAACvB,kBAAiB,CAAC2B,MAAD,CAAlB,CAApB,EAVd,CAWL5B,YAAY,CAAE,sBAAC2B,SAAD,QAAeH,CAAAA,QAAQ,CAACxB,aAAY,CAAC2B,SAAD,CAAb,CAAvB,EAXT,CAAP,CAaD,CAdD,CAgBA,cAAenC,CAAAA,OAAO,CAACa,eAAD,CAAkBkB,kBAAlB,CAAP,CAA6CxB,OAA7C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport {\n  fetchUserPosts,\n  fetchPosts,\n  composePost,\n  removePost,\n} from \"../../actions/post_actions\";\nimport { fetchUsers } from \"../../actions/user_actions\";\nimport { fetchPhotos } from \"../../actions/photo_actions\";\nimport Profile from \"./profile\";\nimport {\n  fetchComment,\n  fetchPostComments,\n  composeComment,\n  removeComment,\n  fetchAllComments,\n} from \"../../actions/comment_actions\";\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    posts: Object.values(state.posts),\n    currentUser: state.session.user,\n    user: ownProps.match.params.id,\n    users: state.users,\n    newPost: state.posts.new,\n    history: ownProps.history,\n    comments: state.comments.all,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUserPosts: (id) => dispatch(fetchUserPosts(id)),\n    fetchPosts: () => dispatch(fetchPosts()),\n    composePost: (data) => dispatch(composePost(data)),\n    fetchUsers: () => dispatch(fetchUsers()),\n    removePost: (id) => dispatch(removePost(id)),\n    fetchPhotos: () => dispatch(fetchPhotos()),\n    fetchAllComments: () => dispatch(fetchAllComments()),\n    composeComment: (comment) => dispatch(composeComment(comment)),\n    removeComment: (commentId) => dispatch(removeComment(commentId)),\n    fetchPostComments: (postId) => dispatch(fetchPostComments(postId)),\n    fetchComment: (commentId) => dispatch(fetchComment(commentId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n"]},"metadata":{},"sourceType":"module"}