{"ast":null,"code":"import{getPosts,getUserPosts,writePost,getPost,deletePost}from\"../util/post_api_util\";export var RECEIVE_POSTS=\"RECEIVE_POSTS\";export var RECEIVE_USER_POSTS=\"RECEIVE_USER_POSTS\";export var RECEIVE_NEW_POST=\"RECEIVE_NEW_POST\";export var DELETE_POST=\"DELETE_POST\";export var RECEIVE_POST=\"RECEIVE_POST\";export var receivePosts=function receivePosts(posts){return{type:RECEIVE_POSTS,posts:posts};};export var receiveUserPosts=function receiveUserPosts(posts){return{type:RECEIVE_USER_POSTS,posts:posts};};export var receiveNewPost=function receiveNewPost(post){return{type:RECEIVE_NEW_POST,post:post};};export var receivePost=function receivePost(post){return{type:RECEIVE_POST,post:post};};export var removeUserPost=function removeUserPost(postId){return{type:DELETE_POST,postId:postId};};export var fetchPosts=function fetchPosts(){return function(dispatch){return getPosts().then(function(posts){return dispatch(receivePosts(posts));}).catch(function(err){return console.log(err);});};};export var fetchUserPosts=function fetchUserPosts(id){return function(dispatch){return getUserPosts(id).then(function(posts){return dispatch(receiveUserPosts(posts));}).catch(function(err){return console.log(err);});};};export var composePost=function composePost(data){return function(dispatch){debugger;return writePost(data).then(function(post){return dispatch(receiveNewPost(post));}).catch(function(err){return console.log(err);});};};export var removePost=function removePost(postId){return function(dispatch){return deletePost(postId).then(function(postId){return dispatch(removeUserPost(postId));}).catch(function(err){return console.log(err);});};};export var fetchPost=function fetchPost(id){return function(dispatch){return getPost(id).then(function(post){return dispatch(receivePost(post));});};};","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/actions/post_actions.js"],"names":["getPosts","getUserPosts","writePost","getPost","deletePost","RECEIVE_POSTS","RECEIVE_USER_POSTS","RECEIVE_NEW_POST","DELETE_POST","RECEIVE_POST","receivePosts","posts","type","receiveUserPosts","receiveNewPost","post","receivePost","removeUserPost","postId","fetchPosts","dispatch","then","catch","err","console","log","fetchUserPosts","id","composePost","data","removePost","fetchPost"],"mappings":"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","sourcesContent":["import {\n  getPosts,\n  getUserPosts,\n  writePost,\n  getPost,\n  deletePost,\n} from \"../util/post_api_util\";\n\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_USER_POSTS = \"RECEIVE_USER_POSTS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const RECEIVE_POST = \"RECEIVE_POST\";\n\nexport const receivePosts = (posts) => ({\n  type: RECEIVE_POSTS,\n  posts,\n});\n\nexport const receiveUserPosts = (posts) => ({\n  type: RECEIVE_USER_POSTS,\n  posts,\n});\n\nexport const receiveNewPost = (post) => ({\n  type: RECEIVE_NEW_POST,\n  post,\n});\n\nexport const receivePost = (post) => ({\n  type: RECEIVE_POST,\n  post,\n});\n\nexport const removeUserPost = (postId) => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const fetchPosts = () => (dispatch) =>\n  getPosts()\n    .then((posts) => dispatch(receivePosts(posts)))\n    .catch((err) => console.log(err));\n\nexport const fetchUserPosts = (id) => (dispatch) =>\n  getUserPosts(id)\n    .then((posts) => dispatch(receiveUserPosts(posts)))\n    .catch((err) => console.log(err));\n\nexport const composePost = (data) => (dispatch) => {\ndebugger\n  return writePost(data)\n    .then((post) => dispatch(receiveNewPost(post)))\n    .catch((err) => console.log(err));\n};\n\nexport const removePost = (postId) => (dispatch) =>\n  deletePost(postId)\n    .then((postId) => dispatch(removeUserPost(postId)))\n    .catch((err) => console.log(err));\n\nexport const fetchPost = (id) => (dispatch) =>\n  getPost(id).then((post) => dispatch(receivePost(post)));\n"]},"metadata":{},"sourceType":"module"}