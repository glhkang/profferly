{"ast":null,"code":"var _jsxFileName = \"/Users/catherinekimyj/Desktop/profferly/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Root from \"./components/root\";\nimport configureStore from \"./store/store\";\nimport jwt_decode from \"jwt-decode\";\nimport { setAuthToken } from \"./util/session_api_util\";\nimport { logout } from \"./actions/session_actions\";\nimport { fetchMarkers, createMarker } from \"./actions/marker_action\";\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n  store = configureStore();\n  window.getState = store.getState;\n  window.dispatch = store.dispatch;\n  window.fetchMarkers = fetchMarkers;\n  window.createMarker = createMarker;\n\n  if (localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        user: decodedUser\n      }\n    };\n    store = configureStore(preloadedState);\n    const currentTime = Date.now() / 1000;\n\n    if (decodedUser.exp < currentTime) {\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    store = configureStore({});\n  }\n\n  window.getState = store.getState;\n  const root = document.getElementById(\"root\");\n  ReactDOM.render( /*#__PURE__*/React.createElement(Root, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }\n  }), root);\n});","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/index.js"],"names":["React","ReactDOM","Root","configureStore","jwt_decode","setAuthToken","logout","fetchMarkers","createMarker","document","addEventListener","store","window","getState","dispatch","localStorage","jwtToken","decodedUser","preloadedState","session","isAuthenticated","user","currentTime","Date","now","exp","location","href","root","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,yBAA3C;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAClD,MAAIC,KAAJ;AACAA,EAAAA,KAAK,GAAGR,cAAc,EAAtB;AACAS,EAAAA,MAAM,CAACC,QAAP,GAAkBF,KAAK,CAACE,QAAxB;AACAD,EAAAA,MAAM,CAACE,QAAP,GAAkBH,KAAK,CAACG,QAAxB;AACAF,EAAAA,MAAM,CAACL,YAAP,GAAsBA,YAAtB;AACAK,EAAAA,MAAM,CAACJ,YAAP,GAAsBA,YAAtB;;AAEA,MAAIO,YAAY,CAACC,QAAjB,EAA2B;AACzBX,IAAAA,YAAY,CAACU,YAAY,CAACC,QAAd,CAAZ;AAEA,UAAMC,WAAW,GAAGb,UAAU,CAACW,YAAY,CAACC,QAAd,CAA9B;AACA,UAAME,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBC,QAAAA,IAAI,EAAEJ;AAA/B;AADY,KAAvB;AAIAN,IAAAA,KAAK,GAAGR,cAAc,CAACe,cAAD,CAAtB;AAEA,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;;AAEA,QAAIP,WAAW,CAACQ,GAAZ,GAAkBH,WAAtB,EAAmC;AACjCX,MAAAA,KAAK,CAACG,QAAN,CAAeR,MAAM,EAArB;AACAM,MAAAA,MAAM,CAACc,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD;AACF,GAhBD,MAgBO;AACLhB,IAAAA,KAAK,GAAGR,cAAc,CAAC,EAAD,CAAtB;AACD;;AACDS,EAAAA,MAAM,CAACC,QAAP,GAAkBF,KAAK,CAACE,QAAxB;AACA,QAAMe,IAAI,GAAGnB,QAAQ,CAACoB,cAAT,CAAwB,MAAxB,CAAb;AAEA5B,EAAAA,QAAQ,CAAC6B,MAAT,eAAgB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAAwCiB,IAAxC;AACD,CA/BD","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Root from \"./components/root\";\nimport configureStore from \"./store/store\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { setAuthToken } from \"./util/session_api_util\";\nimport { logout } from \"./actions/session_actions\";\nimport { fetchMarkers, createMarker } from \"./actions/marker_action\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n  store = configureStore();\n  window.getState = store.getState;\n  window.dispatch = store.dispatch;\n  window.fetchMarkers = fetchMarkers;\n  window.createMarker = createMarker;\n\n  if (localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n    const preloadedState = {\n      session: { isAuthenticated: true, user: decodedUser },\n    };\n\n    store = configureStore(preloadedState);\n\n    const currentTime = Date.now() / 1000;\n\n    if (decodedUser.exp < currentTime) {\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    store = configureStore({});\n  }\n  window.getState = store.getState;\n  const root = document.getElementById(\"root\");\n\n  ReactDOM.render(<Root store={store} />, root);\n});\n"]},"metadata":{},"sourceType":"module"}