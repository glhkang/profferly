{"ast":null,"code":"import { getPosts, getUserPosts, writePost, getPost, deletePost } from '../util/post_api_util';\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_USER_POSTS = \"RECEIVE_USER_POSTS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const RECEIVE_POST = \"RECEIVE_POST\";\nexport const receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nexport const receiveUserPosts = posts => ({\n  type: RECEIVE_USER_POSTS,\n  posts\n});\nexport const receiveNewPost = post => ({\n  type: RECEIVE_NEW_POST,\n  post\n});\nexport const receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nexport const removeUserPost = postId => ({\n  type: DELETE_POST,\n  postId\n});\nexport const fetchPosts = () => dispatch => getPosts().then(posts => dispatch(receivePosts(posts))).catch(err => console.log(err));\nexport const fetchUserPosts = id => dispatch => getUserPosts(id).then(posts => dispatch(receiveUserPosts(posts))).catch(err => console.log(err));\nexport const composePost = data => dispatch => {\n  debugger;\n  return writePost(data).then(post => dispatch(receiveNewPost(post))).catch(err => console.log(err));\n};\nexport const removePost = postId => dispatch => deletePost(postId).then(postId => dispatch(removeUserPost(postId))).catch(err => console.log(err));\nexport const fetchPost = id => dispatch => getPost(id).then(post => dispatch(receivePost(post)));","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/actions/post_actions.js"],"names":["getPosts","getUserPosts","writePost","getPost","deletePost","RECEIVE_POSTS","RECEIVE_USER_POSTS","RECEIVE_NEW_POST","DELETE_POST","RECEIVE_POST","receivePosts","posts","type","receiveUserPosts","receiveNewPost","post","receivePost","removeUserPost","postId","fetchPosts","dispatch","then","catch","err","console","log","fetchUserPosts","id","composePost","data","removePost","fetchPost"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqDC,UAArD,QAAuE,uBAAvE;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,MAAMC,YAAY,GAAGC,KAAK,KAAK;AAClCC,EAAAA,IAAI,EAAEP,aAD4B;AAElCM,EAAAA;AAFkC,CAAL,CAA1B;AAKP,OAAO,MAAME,gBAAgB,GAAGF,KAAK,KAAK;AACtCC,EAAAA,IAAI,EAAEN,kBADgC;AAEtCK,EAAAA;AAFsC,CAAL,CAA9B;AAKP,OAAO,MAAMG,cAAc,GAAGC,IAAI,KAAK;AACnCH,EAAAA,IAAI,EAAEL,gBAD6B;AAEnCQ,EAAAA;AAFmC,CAAL,CAA3B;AAKP,OAAO,MAAMC,WAAW,GAAGD,IAAI,KAAK;AAChCH,EAAAA,IAAI,EAAEH,YAD0B;AAEhCM,EAAAA;AAFgC,CAAL,CAAxB;AAKP,OAAO,MAAME,cAAc,GAAGC,MAAM,KAAK;AACrCN,EAAAA,IAAI,EAAEJ,WAD+B;AAErCU,EAAAA;AAFqC,CAAL,CAA7B;AAKP,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IACpCpB,QAAQ,GACHqB,IADL,CACUV,KAAK,IAAIS,QAAQ,CAACV,YAAY,CAACC,KAAD,CAAb,CAD3B,EAEKW,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADG;AAMP,OAAO,MAAMG,cAAc,GAAGC,EAAE,IAAIP,QAAQ,IACxCnB,YAAY,CAAC0B,EAAD,CAAZ,CACKN,IADL,CACUV,KAAK,IAAIS,QAAQ,CAACP,gBAAgB,CAACF,KAAD,CAAjB,CAD3B,EAEKW,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADG;AAMP,OAAO,MAAMK,WAAW,GAAGC,IAAI,IAAIT,QAAQ,IAAI;AAC/C;AACI,SACIlB,SAAS,CAAC2B,IAAD,CAAT,CACKR,IADL,CACUN,IAAI,IAAIK,QAAQ,CAACN,cAAc,CAACC,IAAD,CAAf,CAD1B,EAEKO,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,CADJ;AAKH,CAPM;AASP,OAAO,MAAMO,UAAU,GAAIZ,MAAD,IAAaE,QAAD,IAClChB,UAAU,CAACc,MAAD,CAAV,CACKG,IADL,CACWH,MAAD,IAAYE,QAAQ,CAACH,cAAc,CAACC,MAAD,CAAf,CAD9B,EAEKI,KAFL,CAEYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFpB,CADG;AAMP,OAAO,MAAMQ,SAAS,GAAGJ,EAAE,IAAIP,QAAQ,IACnCjB,OAAO,CAACwB,EAAD,CAAP,CACKN,IADL,CACUN,IAAI,IAAIK,QAAQ,CAACJ,WAAW,CAACD,IAAD,CAAZ,CAD1B,CADG","sourcesContent":["import { getPosts, getUserPosts, writePost, getPost, deletePost } from '../util/post_api_util';\n\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const RECEIVE_USER_POSTS = \"RECEIVE_USER_POSTS\";\nexport const RECEIVE_NEW_POST = \"RECEIVE_NEW_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const RECEIVE_POST = \"RECEIVE_POST\"\n\nexport const receivePosts = posts => ({\n    type: RECEIVE_POSTS,\n    posts\n});\n\nexport const receiveUserPosts = posts => ({\n    type: RECEIVE_USER_POSTS,\n    posts \n});\n\nexport const receiveNewPost = post => ({\n    type: RECEIVE_NEW_POST,\n    post\n})\n\nexport const receivePost = post => ({\n    type: RECEIVE_POST,\n    post\n})\n\nexport const removeUserPost = postId => ({\n    type: DELETE_POST,\n    postId \n})\n\nexport const fetchPosts = () => dispatch => (\n    getPosts()\n        .then(posts => dispatch(receivePosts(posts)))\n        .catch(err => console.log(err))\n);\n\nexport const fetchUserPosts = id => dispatch => (\n    getUserPosts(id)\n        .then(posts => dispatch(receiveUserPosts(posts)))\n        .catch(err => console.log(err))\n);\n\nexport const composePost = data => dispatch => {\ndebugger\n    return (\n        writePost(data)\n            .then(post => dispatch(receiveNewPost(post)))\n            .catch(err => console.log(err))\n    )\n};\n\nexport const removePost = (postId) => (dispatch) => (\n    deletePost(postId)\n        .then((postId) => dispatch(removeUserPost(postId)))\n        .catch((err) => console.log(err))\n);\n\nexport const fetchPost = id => dispatch => (\n    getPost(id)\n        .then(post => dispatch(receivePost(post))\n        )\n);\n\n"]},"metadata":{},"sourceType":"module"}