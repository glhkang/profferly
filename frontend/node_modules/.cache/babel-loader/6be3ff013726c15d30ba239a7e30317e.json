{"ast":null,"code":"var _jsxFileName = \"/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\";\nimport { fetchRoomMessages, newLocalMessage } from \"../../actions/message_action\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"./bar\";\nimport Input from \"./input\";\nimport Messages from \"./messages\";\nimport TextContainer from \"./text\";\nimport \"./Chat.css\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const user = useSelector(state => state.session.user);\n  const messages = useSelector(state => state.messages.messages);\n  const loading = useSelector(state => state.messages.loading);\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const dispatch = useDispatch();\n  const ENDPOINT = \"localhost:3000\";\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io();\n    setRoom(room);\n    setName(name);\n    dispatch(addRoomToRedux(room));\n    dispatch(fetchRoomMessages(room));\n    socket.emit(\"join\", {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [location.search]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      if (message.user.toUpperCase() === user.username.toUpperCase()) {\n        return;\n      }\n\n      dispatch(newLocalMessage(message));\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      const unique = [...new Set(users.map(item => item.name))];\n      setUsers([...unique]);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", {\n        message,\n        room,\n        user\n      }, () => setMessage(\"\"));\n      dispatch(newLocalMessage({\n        message,\n        user: user.username,\n        room,\n        date: new Date().toISOString()\n      }));\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: \"chat-loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      className: \"loading-icon\",\n      icon: faSpinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 40\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextContainer, {\n    className: \"users-online\",\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js"],"names":["React","useState","useEffect","useDispatch","useSelector","addRoomToRedux","fetchRoomMessages","newLocalMessage","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","user","state","session","messages","loading","name","setName","room","setRoom","users","setUsers","message","setMessage","dispatch","ENDPOINT","parse","search","emit","error","alert","on","toUpperCase","username","unique","Set","map","item","sendMessage","event","preventDefault","date","Date","toISOString","faSpinner"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\";\nimport {\n  fetchRoomMessages,\n  newLocalMessage,\n} from \"../../actions/message_action\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"./bar\";\nimport Input from \"./input\";\nimport Messages from \"./messages\";\nimport TextContainer from \"./text\";\nimport \"./Chat.css\";\nlet socket;\nconst Chat = ({ location }) => {\n  const user = useSelector((state) => state.session.user);\n  const messages = useSelector((state) => state.messages.messages);\n  const loading = useSelector((state) => state.messages.loading);\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const dispatch = useDispatch();\n  const ENDPOINT = \"localhost:3000\";\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n    socket = io();\n    setRoom(room);\n    setName(name);\n    dispatch(addRoomToRedux(room));\n    dispatch(fetchRoomMessages(room));\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [location.search]);\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      if (message.user.toUpperCase() === user.username.toUpperCase()) {\n        return;\n      }\n      dispatch(newLocalMessage(message));\n    });\n    socket.on(\"roomData\", ({ users }) => {\n      const unique = [...new Set(users.map((item) => item.name))];\n      setUsers([...unique]);\n    });\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", { message, room, user }, () => setMessage(\"\"));\n      dispatch(\n        newLocalMessage({\n          message,\n          user: user.username,\n          room,\n          date: new Date().toISOString(),\n        })\n      );\n    }\n  };\n  if (loading) {\n    return <p className=\"chat-loading\"><FontAwesomeIcon className=\"loading-icon\" icon={faSpinner} /></p>;\n  }\n  return (\n    <div className=\"outerContainer\">\n      <TextContainer className=\"users-online\" users={users} />\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n    </div>\n  );\n};\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}