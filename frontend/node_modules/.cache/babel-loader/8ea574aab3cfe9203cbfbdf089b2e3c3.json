{"ast":null,"code":"var _jsxFileName = \"/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\";\nimport { fetchRoomMessages, newLocalMessage } from \"../../actions/message_action\";\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport InfoBar from './bar';\nimport Input from './input';\nimport Messages from './messages';\nimport TextContainer from './text';\nimport \"./Chat.css\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  debugger;\n  const user = useSelector(state => state.session.user);\n  const messagesOld = useSelector(state => state.messages);\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const dispatch = useDispatch();\n  const ENDPOINT = \"localhost:3000\";\n  useEffect(() => {\n    debugger;\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    dispatch(addRoomToRedux(room));\n    dispatch(fetchRoomMessages(room));\n    socket.emit(\"join\", {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      const unique = [...new Set(users.map(item => item.name))];\n      setUsers([...unique]);\n    });\n  }, []);\n  const messagesOldMapped = messagesOld.map(o => ({\n    user: o.user,\n    text: o.message\n  }));\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", {\n        message,\n        room,\n        user\n      }, () => setMessage(\"\"));\n      dispatch(newLocalMessage(message));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextContainer, {\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: [...messagesOldMapped, ...messages],\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/components/chat/chat.js"],"names":["React","useState","useEffect","useDispatch","useSelector","addRoomToRedux","fetchRoomMessages","newLocalMessage","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","user","state","session","messagesOld","messages","name","setName","room","setRoom","users","setUsers","message","setMessage","setMessages","dispatch","ENDPOINT","parse","search","emit","error","alert","on","unique","Set","map","item","messagesOldMapped","o","text","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect} from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addRoomToRedux } from \"../../actions/session_actions\"\nimport { fetchRoomMessages, newLocalMessage } from \"../../actions/message_action\";\n\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport InfoBar from './bar';\nimport Input from './input';\nimport Messages from './messages';\nimport TextContainer from './text';\n\n\nimport \"./Chat.css\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\ndebugger\n    const user = useSelector((state) => state.session.user);\n    const messagesOld = useSelector((state) => state.messages);\n    const [name, setName] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [users, setUsers] = useState([]);\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const dispatch = useDispatch();\n  \n    const ENDPOINT = \"localhost:3000\";\n\n    useEffect(() => {\n  debugger\n      const { name, room } = queryString.parse(location.search);\n\n      socket = io(ENDPOINT);\n\n      setRoom(room);\n      setName(name);\n\n      dispatch(addRoomToRedux(room));\n      dispatch(fetchRoomMessages(room));\n\n      socket.emit(\"join\", { name, room }, (error) => {\n        if (error) {\n          alert(error);\n        }\n      });\n    }, [ENDPOINT, location.search]);\n\n\n    useEffect(() => {\n      socket.on(\"message\", (message) => {\n        setMessages((messages) => [...messages, message]);\n      });\n\n      socket.on(\"roomData\", ({ users }) => {\n        const unique = [...new Set(users.map((item) => item.name))];\n        setUsers([...unique])\n      });\n    }, []);\n\n\n    \n  const messagesOldMapped = messagesOld.map(o => ({ user: o.user, text: o.message }));\n\n\n    const sendMessage = (event) => {\n      event.preventDefault();\n\n      if (message) {\n        socket.emit(\"sendMessage\", {message, room, user }, () => setMessage(\"\"));\n        dispatch(newLocalMessage(message));\n      }\n    };\n\n    return (\n      <div className=\"outerContainer\">\n        <TextContainer users={users} />\n        <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={[...messagesOldMapped, ...messages]} name={name} />\n          <Input\n            message={message}\n            setMessage={setMessage}\n            sendMessage={sendMessage}\n          />\n        </div>\n      </div>\n    );\n};\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}