{"ast":null,"code":"import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\nexport const receiveCurrentUser = currentUser => {\n  //////debugger\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n}; // This will be used to redirect the user to the login page upon signup\n\nexport const receiveUserSignIn = () => {\n  //////debugger\n  return {\n    type: RECEIVE_USER_SIGN_IN\n  };\n}; // We dispatch this one to show authentication errors on the frontend\n\nexport const receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n});\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n});\nexport const signup = user => dispatch => {\n  ////debugger\n  return APIUtil.signup(user).then(res => {\n    const {\n      token\n    } = res.data;\n    localStorage.setItem('jwtToken', token);\n    APIUtil.setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n  }).catch(err => {\n    dispatch(receiveErrors(err.response.data));\n  });\n}; // Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\n\nexport const login = user => dispatch => {\n  //////debugger\n  return APIUtil.login(user).then(res => {\n    const {\n      token\n    } = res.data;\n    localStorage.setItem('jwtToken', token); //////debugger\n\n    APIUtil.setAuthToken(token);\n    const decoded = jwt_decode(token); //////debugger\n\n    dispatch(receiveCurrentUser(decoded));\n  }).catch(err => {\n    dispatch(receiveErrors(err.response.data));\n  });\n};\nexport const logout = () => dispatch => {\n  // Remove the token from local storage\n  localStorage.removeItem('jwtToken'); // Remove the token from the common axios header\n\n  APIUtil.setAuthToken(false); // Dispatch a logout action\n\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_USER_SIGN_IN","receiveCurrentUser","currentUser","type","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","res","token","data","localStorage","setItem","setAuthToken","decoded","catch","err","response","login","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,MAAMC,kBAAkB,GAAGC,WAAW,IAAI;AACjD;AACA,SAAO;AACCC,IAAAA,IAAI,EAAEN,oBADP;AAECK,IAAAA;AAFD,GAAP;AAIC,CANM,C,CAQP;;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAM;AACvC;AACI,SAAO;AACHD,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH,CALM,C,CAOP;;AACA,OAAO,MAAMK,aAAa,GAAGC,MAAM,KAAK;AACpCH,EAAAA,IAAI,EAAEL,sBAD8B;AAEpCQ,EAAAA;AAFoC,CAAL,CAA5B;AAKP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC7BJ,EAAAA,IAAI,EAAEJ;AADuB,CAAP,CAAnB;AAIP,OAAO,MAAMS,MAAM,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AAC1C;AACI,SAAOf,OAAO,CAACa,MAAR,CAAeC,IAAf,EAAqBE,IAArB,CAA0BC,GAAG,IAAI;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAlB,IAAAA,OAAO,CAACsB,YAAR,CAAqBJ,KAArB;AACA,UAAMK,OAAO,GAAGtB,UAAU,CAACiB,KAAD,CAA1B;AACAH,IAAAA,QAAQ,CAACT,kBAAkB,CAACiB,OAAD,CAAnB,CAAR;AACH,GANM,EAOFC,KAPE,CAOIC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACL,aAAa,CAACe,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAAd,CAAR;AACH,GATE,CAAP;AAUH,CAZM,C,CAcP;;AACA,OAAO,MAAMQ,KAAK,GAAGb,IAAI,IAAIC,QAAQ,IAAI;AACzC;AACA,SAAOf,OAAO,CAAC2B,KAAR,CAAcb,IAAd,EAAoBE,IAApB,CAAyBC,GAAG,IAAI;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAF+B,CAGvC;;AACQlB,IAAAA,OAAO,CAACsB,YAAR,CAAqBJ,KAArB;AACA,UAAMK,OAAO,GAAGtB,UAAU,CAACiB,KAAD,CAA1B,CAL+B,CAMvC;;AACQH,IAAAA,QAAQ,CAACT,kBAAkB,CAACiB,OAAD,CAAnB,CAAR;AACH,GARE,EASFC,KATE,CASIC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACL,aAAa,CAACe,GAAG,CAACC,QAAJ,CAAaP,IAAd,CAAd,CAAR;AACH,GAXE,CAAP;AAYC,CAdM;AAgBP,OAAO,MAAMS,MAAM,GAAG,MAAMb,QAAQ,IAAI;AACpC;AACAK,EAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAFoC,CAGpC;;AACA7B,EAAAA,OAAO,CAACsB,YAAR,CAAqB,KAArB,EAJoC,CAKpC;;AACAP,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACH,CAPM","sourcesContent":["import * as APIUtil from '../util/session_api_util';\nimport jwt_decode from 'jwt-decode';\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\nexport const receiveCurrentUser = currentUser => {\n//////debugger\nreturn {\n        type: RECEIVE_CURRENT_USER,\n        currentUser\n    }\n};\n\n// This will be used to redirect the user to the login page upon signup\nexport const receiveUserSignIn = () => {\n//////debugger\n    return {\n        type: RECEIVE_USER_SIGN_IN\n    }\n};\n  \n// We dispatch this one to show authentication errors on the frontend\nexport const receiveErrors = errors => ({\n    type: RECEIVE_SESSION_ERRORS,\n    errors\n});\n\nexport const logoutUser = () => ({\n    type: RECEIVE_USER_LOGOUT\n});\n\nexport const signup = user => dispatch => {\n////debugger\n    return APIUtil.signup(user).then(res => {\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n        APIUtil.setAuthToken(token);\n        const decoded = jwt_decode(token);\n        dispatch(receiveCurrentUser(decoded))\n    })\n        .catch(err => {\n            dispatch(receiveErrors(err.response.data));\n        })\n}\n\n// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\nexport const login = user => dispatch => {\n//////debugger\nreturn APIUtil.login(user).then(res => {\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n//////debugger\n        APIUtil.setAuthToken(token);\n        const decoded = jwt_decode(token);\n//////debugger\n        dispatch(receiveCurrentUser(decoded))\n    })\n    .catch(err => {\n        dispatch(receiveErrors(err.response.data));\n    })\n}\n\nexport const logout = () => dispatch => {\n    // Remove the token from local storage\n    localStorage.removeItem('jwtToken')\n    // Remove the token from the common axios header\n    APIUtil.setAuthToken(false)\n    // Dispatch a logout action\n    dispatch(logoutUser())\n};"]},"metadata":{},"sourceType":"module"}