{"ast":null,"code":"import { connect } from 'react-redux';\nimport { fetchUserPosts, fetchPosts, composePost, removePost } from '../../actions/post_actions';\nimport { fetchUsers } from \"../../actions/user_actions\";\nimport { fetchPhotos } from '../../actions/photo_actions';\nimport Profile from './profile';\nimport { fetchComment, fetchPostComments, composeComment, removeComment, fetchAllComments } from '../../actions/comment_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  // debugger\n  return {\n    posts: Object.values(state.posts),\n    currentUser: state.session.user,\n    user: ownProps.match.params.id,\n    users: state.users,\n    newPost: state.posts.new,\n    history: ownProps.history,\n    comments: state.comments.all\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  //debugger\n  return {\n    fetchUserPosts: id => dispatch(fetchUserPosts(id)),\n    fetchPosts: () => dispatch(fetchPosts()),\n    composePost: data => dispatch(composePost(data)),\n    fetchUsers: () => dispatch(fetchUsers()),\n    removePost: id => dispatch(removePost(id)),\n    fetchPhotos: () => dispatch(fetchPhotos()),\n    fetchAllComments: () => dispatch(fetchAllComments()),\n    composeComment: comment => dispatch(composeComment(comment)),\n    removeComment: commentId => dispatch(removeComment(commentId)),\n    fetchPostComments: postId => dispatch(fetchPostComments(postId)),\n    fetchComment: commentId => dispatch(fetchComment(commentId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","map":{"version":3,"sources":["/Users/catherinekimyj/Desktop/profferly/frontend/src/components/profile/profile_container.js"],"names":["connect","fetchUserPosts","fetchPosts","composePost","removePost","fetchUsers","fetchPhotos","Profile","fetchComment","fetchPostComments","composeComment","removeComment","fetchAllComments","mapStateToProps","state","ownProps","posts","Object","values","currentUser","session","user","match","params","id","users","newPost","new","history","comments","all","mapDispatchToProps","dispatch","data","comment","commentId","postId"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAoCC,WAApC,EAAiDC,UAAjD,QAAmE,4BAAnE;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,YAAT,EAAuBC,iBAAvB,EAA0CC,cAA1C,EAA0DC,aAA1D,EAAyEC,gBAAzE,QAAiG,+BAAjG;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7C;AACI,SAAO;AACHC,IAAAA,KAAK,EAAEC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACE,KAApB,CADJ;AAEHG,IAAAA,WAAW,EAAEL,KAAK,CAACM,OAAN,CAAcC,IAFxB;AAGHA,IAAAA,IAAI,EAAEN,QAAQ,CAACO,KAAT,CAAeC,MAAf,CAAsBC,EAHzB;AAIHC,IAAAA,KAAK,EAAEX,KAAK,CAACW,KAJV;AAKHC,IAAAA,OAAO,EAAEZ,KAAK,CAACE,KAAN,CAAYW,GALlB;AAMHC,IAAAA,OAAO,EAAEb,QAAQ,CAACa,OANf;AAOHC,IAAAA,QAAQ,EAAEf,KAAK,CAACe,QAAN,CAAeC;AAPtB,GAAP;AASH,CAXD;;AAaA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACvC;AACI,SAAO;AACH/B,IAAAA,cAAc,EAAEuB,EAAE,IAAIQ,QAAQ,CAAC/B,cAAc,CAACuB,EAAD,CAAf,CAD3B;AAEHtB,IAAAA,UAAU,EAAE,MAAM8B,QAAQ,CAAC9B,UAAU,EAAX,CAFvB;AAGHC,IAAAA,WAAW,EAAE8B,IAAI,IAAID,QAAQ,CAAC7B,WAAW,CAAC8B,IAAD,CAAZ,CAH1B;AAIH5B,IAAAA,UAAU,EAAE,MAAM2B,QAAQ,CAAC3B,UAAU,EAAX,CAJvB;AAKHD,IAAAA,UAAU,EAAEoB,EAAE,IAAIQ,QAAQ,CAAC5B,UAAU,CAACoB,EAAD,CAAX,CALvB;AAMHlB,IAAAA,WAAW,EAAE,MAAM0B,QAAQ,CAAC1B,WAAW,EAAZ,CANxB;AAOHM,IAAAA,gBAAgB,EAAE,MAAMoB,QAAQ,CAACpB,gBAAgB,EAAjB,CAP7B;AAQHF,IAAAA,cAAc,EAAGwB,OAAD,IAAaF,QAAQ,CAACtB,cAAc,CAACwB,OAAD,CAAf,CARlC;AASHvB,IAAAA,aAAa,EAAGwB,SAAD,IAAeH,QAAQ,CAACrB,aAAa,CAACwB,SAAD,CAAd,CATnC;AAUH1B,IAAAA,iBAAiB,EAAG2B,MAAD,IAAYJ,QAAQ,CAACvB,iBAAiB,CAAC2B,MAAD,CAAlB,CAVpC;AAWH5B,IAAAA,YAAY,EAAE2B,SAAS,IAAIH,QAAQ,CAACxB,YAAY,CAAC2B,SAAD,CAAb;AAXhC,GAAP;AAaH,CAfD;;AAiBA,eAAenC,OAAO,CAACa,eAAD,EAAkBkB,kBAAlB,CAAP,CAA6CxB,OAA7C,CAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { fetchUserPosts, fetchPosts,composePost, removePost } from '../../actions/post_actions';\nimport { fetchUsers } from \"../../actions/user_actions\";\nimport { fetchPhotos } from '../../actions/photo_actions';\nimport Profile from './profile';\nimport { fetchComment, fetchPostComments, composeComment, removeComment, fetchAllComments } from '../../actions/comment_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n// debugger\n    return {\n        posts: Object.values(state.posts),\n        currentUser: state.session.user,\n        user: ownProps.match.params.id,\n        users: state.users,\n        newPost: state.posts.new,\n        history: ownProps.history,\n        comments: state.comments.all\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n//debugger\n    return {\n        fetchUserPosts: id => dispatch(fetchUserPosts(id)),\n        fetchPosts: () => dispatch(fetchPosts()),\n        composePost: data => dispatch(composePost(data)),\n        fetchUsers: () => dispatch(fetchUsers()),\n        removePost: id => dispatch(removePost(id)),\n        fetchPhotos: () => dispatch(fetchPhotos()),\n        fetchAllComments: () => dispatch(fetchAllComments()),\n        composeComment: (comment) => dispatch(composeComment(comment)),\n        removeComment: (commentId) => dispatch(removeComment(commentId)),\n        fetchPostComments: (postId) => dispatch(fetchPostComments(postId)),\n        fetchComment: commentId => dispatch(fetchComment(commentId)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);"]},"metadata":{},"sourceType":"module"}